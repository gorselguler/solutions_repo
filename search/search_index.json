{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1: Investigating the Range as a Function of the Angle of Projection 1. Introduction Projectile motion is a cornerstone of classical mechanics, illustrating how an object behaves under uniform gravitational acceleration after being launched with an initial velocity. Although the basic equations of projectile motion are straightforward, the problem offers a rich landscape of analysis. In this report, we investigate how the horizontal range depends on the angle of projection, exploring the theoretical foundation, computational implementation, and real-world applications. We also discuss how variations in initial conditions\u2014such as velocity, gravity, and launch height\u2014expand the family of solutions, giving rise to multiple trajectories that can model diverse physical phenomena. 2. Theoretical Foundation 2.1 Governing Equations The motion of a projectile in two-dimensional space \\((x, y)\\) can be derived from Newton\u2019s laws under constant gravitational acceleration \\(g\\) . Neglecting air resistance, the differential equations of motion are: \\[ \\frac{d^2 x}{dt^2} = 0, \\quad \\frac{d^2 y}{dt^2} = -g. \\] These simplify to: Horizontal Motion (no acceleration): $$ \\frac{d^2 x}{dt^2} = 0 \\quad \\Longrightarrow \\quad \\frac{dx}{dt} = v_0 \\cos(\\theta), \\quad x(t) = v_0 \\cos(\\theta)\\, t. $$ Vertical Motion (constant acceleration \\(-g\\) ): $$ \\frac{d^2 y}{dt^2} = -g \\quad \\Longrightarrow \\quad \\frac{dy}{dt} = v_0 \\sin(\\theta) - g t, \\quad y(t) = v_0 \\sin(\\theta)\\, t - \\tfrac{1}{2} g t^2. $$ Here, - \\(v_0\\) is the initial speed, - \\(\\theta\\) is the angle of projection (relative to the horizontal), - \\(x(t)\\) and \\(y(t)\\) are the horizontal and vertical positions as functions of time. 2.2 Time of Flight and Range For a projectile launched from ground level and returning to the same vertical level \\((y = 0)\\) , the time of flight \\(T\\) is obtained by solving \\(y(T) = 0\\) : \\[ y(T) = v_0 \\sin(\\theta)\\, T - \\tfrac{1}{2} g\\, T^2 = 0. \\] This yields two solutions: \\(T = 0\\) (initial launch) and \\[ T = \\frac{2\\,v_0 \\sin(\\theta)}{g}. \\] Substituting \\(T\\) into the expression for \\(x(t)\\) gives the range \\(R\\) : \\[ R = x(T) = v_0 \\cos(\\theta)\\,\\frac{2\\,v_0 \\sin(\\theta)}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g}. \\] 2.3 Family of Solutions Varying parameters like \\(\\theta\\) , \\(v_0\\) , or \\(g\\) leads to a family of possible trajectories: Angle \\(\\theta\\) : Influences the shape of the trajectory. The maximum range is achieved when \\(\\sin(2\\theta) = 1 \\implies \\theta = 45^\\circ\\) . Initial Velocity \\(v_0\\) : The range depends quadratically on \\(v_0\\) . Doubling \\(v_0\\) quadruples the theoretical range. Gravitational Acceleration \\(g\\) : Lower \\(g\\) (e.g., on the Moon) increases the range; higher \\(g\\) (e.g., on Jupiter) reduces it. Initial Height \\(h\\) : If launched from a nonzero height, the time in the air changes, altering the total range and trajectory shape. 3. Analysis of the Range Range vs. Angle $$ R(\\theta) = \\frac{v_0^2}{g} \\,\\sin(2\\theta). $$ Maximum Range : \\(\\theta = 45^\\circ\\) . Symmetry : \\(\\sin(2\\theta)\\) has the same value for angles \\(\\theta\\) and \\((90^\\circ - \\theta)\\) . For example, \\(30^\\circ\\) and \\(60^\\circ\\) produce the same range (neglecting air resistance). Influence of Velocity Higher launch velocity shifts the entire range curve upward (since \\(v_0^2\\) appears in the numerator). Impact of Gravity A smaller \\(g\\) value extends the flight time and range; a larger \\(g\\) reduces both. 4. Practical Applications Projectile motion underpins many real-world scenarios: Sports Football (Soccer): Kicking the ball with an optimal angle to maximize distance. Basketball: Adjusting angle and velocity to achieve precise arcs into the hoop. Engineering Cannons and Ballistics: Calculating the range for shells or projectiles under Earth\u2019s gravity. Launch Systems: Designing rocket trajectories for short suborbital flights. Astrophysics Satellite Launches: Transfer orbits rely on projectile-like arcs under planetary gravity. Interplanetary Missions: Calculating gravitational assists and slingshots around celestial bodies. Environmental Studies Pollutant Dispersion: Modeling how particles travel in the atmosphere or water. Wildfire Smoke Trajectories: Predicting how far smoke travels and in which direction. 5. Implementation Below you can see the various simulations and just below the simulations there is a comprehensive Python script: 1. Three different initial velocities on the same plot (angle fixed). 2. Same initial conditions on three different gravitational fields (e.g., Earth, Moon, Jupiter). 3. Different initial heights with the same velocity and angle. 4. With and without air resistance for a chosen angle and velocity. import matplotlib matplotlib.use('Agg') import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation, PillowWriter import matplotlib.ticker as mticker ############################################ # 1) Projectile with no drag ############################################ def projectile_no_drag(v0, angle_deg, g=9.81, h=0.0, dt=0.02): angle_rad = np.radians(angle_deg) vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) x_vals, y_vals = [0.0], [h] t = 0.0 while True: t += dt x_new = vx * t y_new = h + vy * t - 0.5*g*(t**2) x_vals.append(x_new) y_vals.append(y_new) if y_new <= 0: break return np.array(x_vals), np.array(y_vals) ############################################ # 2) Projectile with linear drag ############################################ def projectile_with_drag(v0, angle_deg, g=9.81, h=0.0, k=0.1, dt=0.02): angle_rad = np.radians(angle_deg) vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) x_vals, y_vals = [0.0], [h] while True: ax = -k * vx ay = -g - k * vy vx += ax * dt vy_new = vy + ay * dt x_new = x_vals[-1] + vx * dt y_new = y_vals[-1] + vy * dt x_vals.append(x_new) y_vals.append(y_new) vy = vy_new if y_new <= 0: break return np.array(x_vals), np.array(y_vals) ############################################ # Create animation and save as .gif ############################################ def create_animation(x_arrays, y_arrays, labels, title, gif_name, xlim=None, ylim=None, xtick=None, ytick=None): \"\"\" Creates a FuncAnimation that draws each trajectory step by step, then saves it as a .gif file using PillowWriter. xlim, ylim: (xmin, xmax), (ymin, ymax) xtick, ytick: major tick intervals for x and y \"\"\" fig, ax = plt.subplots(figsize=(6,4)) lines = [] for lab in labels: (line,) = ax.plot([], [], label=lab) lines.append(line) ax.set_title(title) ax.set_xlabel(\"Horizontal Distance (m)\") ax.set_ylabel(\"Vertical Distance (m)\") ax.grid(True) ax.legend() if xlim: ax.set_xlim(xlim) if ylim: ax.set_ylim(ylim) if xtick: ax.xaxis.set_major_locator(mticker.MultipleLocator(xtick)) if ytick: ax.yaxis.set_major_locator(mticker.MultipleLocator(ytick)) max_len = max(len(x) for x in x_arrays) def init(): for line in lines: line.set_data([], []) return lines def update(frame): for i in range(len(x_arrays)): xs = x_arrays[i][:frame] ys = y_arrays[i][:frame] lines[i].set_data(xs, ys) return lines anim = FuncAnimation(fig, update, frames=range(max_len), init_func=init, blit=False) anim.save(gif_name, writer=PillowWriter(fps=15)) plt.close(fig) ############################################ # SCENARIO 1: Three different initial velocities ############################################ def scenario1(): velocities = [10, 20, 30] angle = 45 x_arrays, y_arrays = [], [] labels = [] for v0 in velocities: x, y = projectile_no_drag(v0, angle, 9.81, 0.0, dt=0.02) x_arrays.append(x) y_arrays.append(y) labels.append(f\"v0 = {v0} m/s\") # horizontal: 0..103, step 20 # vertical: -2..28, step 10 create_animation( x_arrays, y_arrays, labels, title=\"Projectile Motion with Different Initial Velocities (Angle = 45\u00b0)\", gif_name=\"scenario1.gif\", xlim=(0,103), ylim=(-2,28), xtick=20, ytick=10 ) ############################################ # SCENARIO 2: Different gravitational fields ############################################ def scenario2(): g_planets = {\"Earth\": 9.81, \"Moon\": 1.62, \"Jupiter\": 24.79} v0, angle = 20, 45 x_arrays, y_arrays, labels = [], [], [] for planet, g_val in g_planets.items(): x, y = projectile_no_drag(v0, angle, g_val, 0.0, dt=0.02) x_arrays.append(x) y_arrays.append(y) labels.append(f\"{planet} (g={g_val:.2f} m/s^2)\") # horizontal: 0..253, step 50 # vertical: -2..73, step 10 create_animation( x_arrays, y_arrays, labels, title=\"Projectile Motion on Different Planets (v0=20 m/s, Angle=45\u00b0)\", gif_name=\"scenario2.gif\", xlim=(0,253), ylim=(-2,73), xtick=50, ytick=10 ) ############################################ # SCENARIO 3: Different initial heights ############################################ def scenario3(): heights = [0, 10, 20] v0, angle = 20, 45 x_arrays, y_arrays, labels = [], [], [] for h in heights: x, y = projectile_no_drag(v0, angle, 9.81, h, dt=0.02) x_arrays.append(x) y_arrays.append(y) labels.append(f\"Height = {h} m\") # horizontal: 0..68, step 10 # vertical: -2..38, step 5 create_animation( x_arrays, y_arrays, labels, title=\"Projectile Motion with Different Launch Heights\", gif_name=\"scenario3.gif\", xlim=(0,68), ylim=(-2,38), xtick=10, ytick=5 ) ############################################ # SCENARIO 4: With and without air resistance ############################################ def scenario4(): x_no_drag, y_no_drag = projectile_no_drag(20, 45, 9.81, 0.0, dt=0.02) x_drag, y_drag = projectile_with_drag(20, 45, 9.81, 0.0, k=0.08, dt=0.02) x_arrays = [x_no_drag, x_drag] y_arrays = [y_no_drag, y_drag] labels = [\"No Air Resistance\", \"With Air Resistance (k=0.08)\"] # horizontal: 0..58, step 10 # vertical: -1..15, step 2 create_animation( x_arrays, y_arrays, labels, title=\"Projectile Motion Comparison: No Drag vs. With Drag\", gif_name=\"scenario4.gif\", xlim=(0,58), ylim=(-1,15), xtick=10, ytick=2 ) if __name__ == \"__main__\": scenario1() scenario2() scenario3() scenario4() print(\"All GIFs created (scenario1.gif, scenario2.gif, scenario3.gif, scenario4.gif).\")","title":"Problem 1:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-introduction","text":"Projectile motion is a cornerstone of classical mechanics, illustrating how an object behaves under uniform gravitational acceleration after being launched with an initial velocity. Although the basic equations of projectile motion are straightforward, the problem offers a rich landscape of analysis. In this report, we investigate how the horizontal range depends on the angle of projection, exploring the theoretical foundation, computational implementation, and real-world applications. We also discuss how variations in initial conditions\u2014such as velocity, gravity, and launch height\u2014expand the family of solutions, giving rise to multiple trajectories that can model diverse physical phenomena.","title":"1. Introduction"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-theoretical-foundation","text":"","title":"2. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-governing-equations","text":"The motion of a projectile in two-dimensional space \\((x, y)\\) can be derived from Newton\u2019s laws under constant gravitational acceleration \\(g\\) . Neglecting air resistance, the differential equations of motion are: \\[ \\frac{d^2 x}{dt^2} = 0, \\quad \\frac{d^2 y}{dt^2} = -g. \\] These simplify to: Horizontal Motion (no acceleration): $$ \\frac{d^2 x}{dt^2} = 0 \\quad \\Longrightarrow \\quad \\frac{dx}{dt} = v_0 \\cos(\\theta), \\quad x(t) = v_0 \\cos(\\theta)\\, t. $$ Vertical Motion (constant acceleration \\(-g\\) ): $$ \\frac{d^2 y}{dt^2} = -g \\quad \\Longrightarrow \\quad \\frac{dy}{dt} = v_0 \\sin(\\theta) - g t, \\quad y(t) = v_0 \\sin(\\theta)\\, t - \\tfrac{1}{2} g t^2. $$ Here, - \\(v_0\\) is the initial speed, - \\(\\theta\\) is the angle of projection (relative to the horizontal), - \\(x(t)\\) and \\(y(t)\\) are the horizontal and vertical positions as functions of time.","title":"2.1 Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-time-of-flight-and-range","text":"For a projectile launched from ground level and returning to the same vertical level \\((y = 0)\\) , the time of flight \\(T\\) is obtained by solving \\(y(T) = 0\\) : \\[ y(T) = v_0 \\sin(\\theta)\\, T - \\tfrac{1}{2} g\\, T^2 = 0. \\] This yields two solutions: \\(T = 0\\) (initial launch) and \\[ T = \\frac{2\\,v_0 \\sin(\\theta)}{g}. \\] Substituting \\(T\\) into the expression for \\(x(t)\\) gives the range \\(R\\) : \\[ R = x(T) = v_0 \\cos(\\theta)\\,\\frac{2\\,v_0 \\sin(\\theta)}{g} = \\frac{v_0^2 \\sin(2\\theta)}{g}. \\]","title":"2.2 Time of Flight and Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#23-family-of-solutions","text":"Varying parameters like \\(\\theta\\) , \\(v_0\\) , or \\(g\\) leads to a family of possible trajectories: Angle \\(\\theta\\) : Influences the shape of the trajectory. The maximum range is achieved when \\(\\sin(2\\theta) = 1 \\implies \\theta = 45^\\circ\\) . Initial Velocity \\(v_0\\) : The range depends quadratically on \\(v_0\\) . Doubling \\(v_0\\) quadruples the theoretical range. Gravitational Acceleration \\(g\\) : Lower \\(g\\) (e.g., on the Moon) increases the range; higher \\(g\\) (e.g., on Jupiter) reduces it. Initial Height \\(h\\) : If launched from a nonzero height, the time in the air changes, altering the total range and trajectory shape.","title":"2.3 Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-analysis-of-the-range","text":"Range vs. Angle $$ R(\\theta) = \\frac{v_0^2}{g} \\,\\sin(2\\theta). $$ Maximum Range : \\(\\theta = 45^\\circ\\) . Symmetry : \\(\\sin(2\\theta)\\) has the same value for angles \\(\\theta\\) and \\((90^\\circ - \\theta)\\) . For example, \\(30^\\circ\\) and \\(60^\\circ\\) produce the same range (neglecting air resistance). Influence of Velocity Higher launch velocity shifts the entire range curve upward (since \\(v_0^2\\) appears in the numerator). Impact of Gravity A smaller \\(g\\) value extends the flight time and range; a larger \\(g\\) reduces both.","title":"3. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-practical-applications","text":"Projectile motion underpins many real-world scenarios:","title":"4. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#sports","text":"Football (Soccer): Kicking the ball with an optimal angle to maximize distance. Basketball: Adjusting angle and velocity to achieve precise arcs into the hoop.","title":"Sports"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#engineering","text":"Cannons and Ballistics: Calculating the range for shells or projectiles under Earth\u2019s gravity. Launch Systems: Designing rocket trajectories for short suborbital flights.","title":"Engineering"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#astrophysics","text":"Satellite Launches: Transfer orbits rely on projectile-like arcs under planetary gravity. Interplanetary Missions: Calculating gravitational assists and slingshots around celestial bodies.","title":"Astrophysics"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#environmental-studies","text":"Pollutant Dispersion: Modeling how particles travel in the atmosphere or water. Wildfire Smoke Trajectories: Predicting how far smoke travels and in which direction.","title":"Environmental Studies"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-implementation","text":"Below you can see the various simulations and just below the simulations there is a comprehensive Python script: 1. Three different initial velocities on the same plot (angle fixed). 2. Same initial conditions on three different gravitational fields (e.g., Earth, Moon, Jupiter). 3. Different initial heights with the same velocity and angle. 4. With and without air resistance for a chosen angle and velocity. import matplotlib matplotlib.use('Agg') import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation, PillowWriter import matplotlib.ticker as mticker ############################################ # 1) Projectile with no drag ############################################ def projectile_no_drag(v0, angle_deg, g=9.81, h=0.0, dt=0.02): angle_rad = np.radians(angle_deg) vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) x_vals, y_vals = [0.0], [h] t = 0.0 while True: t += dt x_new = vx * t y_new = h + vy * t - 0.5*g*(t**2) x_vals.append(x_new) y_vals.append(y_new) if y_new <= 0: break return np.array(x_vals), np.array(y_vals) ############################################ # 2) Projectile with linear drag ############################################ def projectile_with_drag(v0, angle_deg, g=9.81, h=0.0, k=0.1, dt=0.02): angle_rad = np.radians(angle_deg) vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) x_vals, y_vals = [0.0], [h] while True: ax = -k * vx ay = -g - k * vy vx += ax * dt vy_new = vy + ay * dt x_new = x_vals[-1] + vx * dt y_new = y_vals[-1] + vy * dt x_vals.append(x_new) y_vals.append(y_new) vy = vy_new if y_new <= 0: break return np.array(x_vals), np.array(y_vals) ############################################ # Create animation and save as .gif ############################################ def create_animation(x_arrays, y_arrays, labels, title, gif_name, xlim=None, ylim=None, xtick=None, ytick=None): \"\"\" Creates a FuncAnimation that draws each trajectory step by step, then saves it as a .gif file using PillowWriter. xlim, ylim: (xmin, xmax), (ymin, ymax) xtick, ytick: major tick intervals for x and y \"\"\" fig, ax = plt.subplots(figsize=(6,4)) lines = [] for lab in labels: (line,) = ax.plot([], [], label=lab) lines.append(line) ax.set_title(title) ax.set_xlabel(\"Horizontal Distance (m)\") ax.set_ylabel(\"Vertical Distance (m)\") ax.grid(True) ax.legend() if xlim: ax.set_xlim(xlim) if ylim: ax.set_ylim(ylim) if xtick: ax.xaxis.set_major_locator(mticker.MultipleLocator(xtick)) if ytick: ax.yaxis.set_major_locator(mticker.MultipleLocator(ytick)) max_len = max(len(x) for x in x_arrays) def init(): for line in lines: line.set_data([], []) return lines def update(frame): for i in range(len(x_arrays)): xs = x_arrays[i][:frame] ys = y_arrays[i][:frame] lines[i].set_data(xs, ys) return lines anim = FuncAnimation(fig, update, frames=range(max_len), init_func=init, blit=False) anim.save(gif_name, writer=PillowWriter(fps=15)) plt.close(fig) ############################################ # SCENARIO 1: Three different initial velocities ############################################ def scenario1(): velocities = [10, 20, 30] angle = 45 x_arrays, y_arrays = [], [] labels = [] for v0 in velocities: x, y = projectile_no_drag(v0, angle, 9.81, 0.0, dt=0.02) x_arrays.append(x) y_arrays.append(y) labels.append(f\"v0 = {v0} m/s\") # horizontal: 0..103, step 20 # vertical: -2..28, step 10 create_animation( x_arrays, y_arrays, labels, title=\"Projectile Motion with Different Initial Velocities (Angle = 45\u00b0)\", gif_name=\"scenario1.gif\", xlim=(0,103), ylim=(-2,28), xtick=20, ytick=10 ) ############################################ # SCENARIO 2: Different gravitational fields ############################################ def scenario2(): g_planets = {\"Earth\": 9.81, \"Moon\": 1.62, \"Jupiter\": 24.79} v0, angle = 20, 45 x_arrays, y_arrays, labels = [], [], [] for planet, g_val in g_planets.items(): x, y = projectile_no_drag(v0, angle, g_val, 0.0, dt=0.02) x_arrays.append(x) y_arrays.append(y) labels.append(f\"{planet} (g={g_val:.2f} m/s^2)\") # horizontal: 0..253, step 50 # vertical: -2..73, step 10 create_animation( x_arrays, y_arrays, labels, title=\"Projectile Motion on Different Planets (v0=20 m/s, Angle=45\u00b0)\", gif_name=\"scenario2.gif\", xlim=(0,253), ylim=(-2,73), xtick=50, ytick=10 ) ############################################ # SCENARIO 3: Different initial heights ############################################ def scenario3(): heights = [0, 10, 20] v0, angle = 20, 45 x_arrays, y_arrays, labels = [], [], [] for h in heights: x, y = projectile_no_drag(v0, angle, 9.81, h, dt=0.02) x_arrays.append(x) y_arrays.append(y) labels.append(f\"Height = {h} m\") # horizontal: 0..68, step 10 # vertical: -2..38, step 5 create_animation( x_arrays, y_arrays, labels, title=\"Projectile Motion with Different Launch Heights\", gif_name=\"scenario3.gif\", xlim=(0,68), ylim=(-2,38), xtick=10, ytick=5 ) ############################################ # SCENARIO 4: With and without air resistance ############################################ def scenario4(): x_no_drag, y_no_drag = projectile_no_drag(20, 45, 9.81, 0.0, dt=0.02) x_drag, y_drag = projectile_with_drag(20, 45, 9.81, 0.0, k=0.08, dt=0.02) x_arrays = [x_no_drag, x_drag] y_arrays = [y_no_drag, y_drag] labels = [\"No Air Resistance\", \"With Air Resistance (k=0.08)\"] # horizontal: 0..58, step 10 # vertical: -1..15, step 2 create_animation( x_arrays, y_arrays, labels, title=\"Projectile Motion Comparison: No Drag vs. With Drag\", gif_name=\"scenario4.gif\", xlim=(0,58), ylim=(-1,15), xtick=10, ytick=2 ) if __name__ == \"__main__\": scenario1() scenario2() scenario3() scenario4() print(\"All GIFs created (scenario1.gif, scenario2.gif, scenario3.gif, scenario4.gif).\")","title":"5. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2: Investigating the Dynamics of a Forced Damped Pendulum 1. Theoretical Foundation We start from the forced damped pendulum equation: $$ \\frac{d^2\\theta}{dt^2} + b\\,\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega_d\\,t) $$ 1.1 Small-Angle Approximation For small angles, we use the approximation $$ \\sin\\theta \\approx \\theta $$ which linearizes the equation to $$ \\frac{d^2\\theta}{dt^2} + b\\,\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega_d\\,t) $$ This differential equation has both homogeneous and particular solutions: Homogeneous Solution: The characteristic equation is $$ r^2 + b\\,r + \\frac{g}{L} = 0 $$ Depending on the value of \\(b\\) , the roots can be real or complex, leading to overdamped, critically damped, or underdamped responses. Particular Solution: For the forcing term $$ A\\cos(\\omega_d\\,t) $$ we try a solution of the form $$ \\theta_p(t) = C\\cos\\bigl(\\omega_d\\,t - \\varphi\\bigr) $$ This solution shows maximum amplitude near resonance, where $$ \\omega_d \\approx \\omega_0 = \\sqrt{\\frac{g}{L}}. $$ 1.2 Energy Considerations and Resonance The total energy of the pendulum is given by the sum of the kinetic and potential energies: $$ E(t) = \\frac{1}{2}m\\Bigl(L\\dot{\\theta}\\Bigr)^2 + mgL\\Bigl(1-\\cos\\theta\\Bigr) $$ Under resonance conditions (especially in undamped or weakly damped regimes), the driving force continuously feeds energy into the system, increasing the oscillation amplitude. In the damped scenario, energy dissipates over time, causing the amplitude to decay. In the forced pendulum, the external force introduces complex behaviors\u2014including periodic, quasiperiodic, and chaotic dynamics\u2014which will be examined in the following sections. 2. Analysis of Dynamics We analyze three main cases: Pure Pendulum: \\(b = 0\\) and \\(A = 0\\) The system exhibits undriven, periodic oscillations. Damped Pendulum: \\(b \\neq 0\\) and \\(A = 0\\) Due to energy loss from damping, the oscillation amplitude decays over time and the phase space trajectory spirals into the origin. Forced (Driven) Pendulum: In this case, the simulation is performed using \\(b = 0\\) and a nonzero driving amplitude \\(A\\) (e.g., \\(A = 1.0\\) ). The external forcing leads to complex behavior that may range from regular periodic motion to chaos. Phase diagrams and Poincar\u00e9 sections will illustrate these transitions. In addition, varying the parameters (damping coefficient \\(b\\) , driving amplitude \\(A\\) , and driving frequency \\(\\omega_d\\) ) systematically reveals transitions in the dynamics, including resonant amplification and chaotic regimes. Bifurcation diagrams will help visualize how changes in, for example, the driving amplitude \\(A\\) affect the system\u2019s attractors. 3. Practical Applications The forced damped pendulum model applies in various real-world scenarios, including: Energy Harvesting: Optimizing energy transfer from ambient vibrations. Suspension Bridges: Managing vibrations due to periodic loads. Oscillating Circuits (Driven RLC Circuits): Understanding resonance and damping in electrical analogues. Biomechanics: Modeling periodic motions such as human gait. 4. Implementation The following Python code implements the simulations for the three cases, generates time series, phase space diagrams, a Poincar\u00e9 section, and includes a bifurcation diagram by varying the driving amplitude \\(A\\) . Note that for the forced pendulum, the damping coefficient is set to \\(b = 0\\) as requested. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # --- Constants --- g = 9.81 # Acceleration due to gravity (m/s^2) L = 1.0 # Length of the pendulum (m) omega_d = 2/3 # Driving frequency # --- Differential Equation Definition --- def pendulum_ode(t, y, b, A, omega_d): theta, omega = y dtheta_dt = omega domega_dt = -b * omega - (g / L) * np.sin(theta) + A * np.cos(omega_d * t) return [dtheta_dt, domega_dt] # --- Simulation Settings --- t_span = (0, 20) # Simulation time span (s) t_eval = np.linspace(t_span[0], t_span[1], 1000) # Time evaluation points y0 = [0.2, 0.0] # Initial conditions: \u03b8 = 0.2 rad, \u03c9 = 0 rad/s # --- Scenario Parameters --- # Pure Pendulum: b = 0, A = 0 b_pure, A_pure = 0.0, 0.0 # Damped Pendulum: b \u2260 0, A = 0 (e.g., b = 0.5) b_damped, A_damped = 0.5, 0.0 # Forced Pendulum: b = 0, A \u2260 0 (e.g., A = 1.0) b_forced, A_forced = 0.0, 1.0 # --- Compute the Solutions --- sol_pure = solve_ivp(pendulum_ode, t_span, y0, t_eval=t_eval, args=(b_pure, A_pure, omega_d)) sol_damped = solve_ivp(pendulum_ode, t_span, y0, t_eval=t_eval, args=(b_damped, A_damped, omega_d)) sol_forced = solve_ivp(pendulum_ode, t_span, y0, t_eval=t_eval, args=(b_forced, A_forced, omega_d)) ############################ # Separate Visualizations ############################ # 1. Pure Pendulum Visualizations plt.figure(figsize=(12, 5)) plt.subplot(1, 2, 1) plt.plot(t_eval, sol_pure.y[0], color='blue') plt.xlabel(\"Time (s)\") plt.ylabel(\"\u03b8 (rad)\") plt.title(\"Pure Pendulum: Time Series (b=0, A=0)\") plt.grid(True) plt.subplot(1, 2, 2) plt.plot(sol_pure.y[0], sol_pure.y[1], color='blue') plt.xlabel(\"\u03b8 (rad)\") plt.ylabel(\"\u03c9 (rad/s)\") plt.title(\"Pure Pendulum: Phase Portrait\") plt.grid(True) plt.tight_layout() plt.show() # 2. Damped Pendulum Visualizations plt.figure(figsize=(12, 5)) plt.subplot(1, 2, 1) plt.plot(t_eval, sol_damped.y[0], color='green') plt.xlabel(\"Time (s)\") plt.ylabel(\"\u03b8 (rad)\") plt.title(\"Damped Pendulum: Time Series (b=0.5, A=0)\") plt.grid(True) plt.subplot(1, 2, 2) plt.plot(sol_damped.y[0], sol_damped.y[1], color='green') plt.xlabel(\"\u03b8 (rad)\") plt.ylabel(\"\u03c9 (rad/s)\") plt.title(\"Damped Pendulum: Phase Portrait\") plt.grid(True) plt.tight_layout() plt.show() # 3. Forced Pendulum Visualizations plt.figure(figsize=(12, 5)) plt.subplot(1, 2, 1) plt.plot(t_eval, sol_forced.y[0], color='red') plt.xlabel(\"Time (s)\") plt.ylabel(\"\u03b8 (rad)\") plt.title(\"Forced Pendulum: Time Series (b=0, A=1.0)\") plt.grid(True) plt.subplot(1, 2, 2) plt.plot(sol_forced.y[0], sol_forced.y[1], color='red') plt.xlabel(\"\u03b8 (rad)\") plt.ylabel(\"\u03c9 (rad/s)\") plt.title(\"Forced Pendulum: Phase Portrait\") plt.grid(True) plt.tight_layout() plt.show() ############################ # Comparative Visualizations ############################ plt.figure(figsize=(14, 6)) # Time Series Comparison plt.subplot(1, 2, 1) plt.plot(t_eval, sol_pure.y[0], label=\"Pure (b=0, A=0)\", color='blue') plt.plot(t_eval, sol_damped.y[0], label=\"Damped (b=0.5, A=0)\", color='green') plt.plot(t_eval, sol_forced.y[0], label=\"Forced (b=0, A=1.0)\", color='red') plt.xlabel(\"Time (s)\") plt.ylabel(\"\u03b8 (rad)\") plt.title(\"Time Series Comparison\") plt.legend() plt.grid(True) # Phase Portrait Comparison plt.subplot(1, 2, 2) plt.plot(sol_pure.y[0], sol_pure.y[1], label=\"Pure (b=0, A=0)\", color='blue') plt.plot(sol_damped.y[0], sol_damped.y[1], label=\"Damped (b=0.5, A=0)\", color='green') plt.plot(sol_forced.y[0], sol_forced.y[1], label=\"Forced (b=0, A=1.0)\", color='red') plt.xlabel(\"\u03b8 (rad)\") plt.ylabel(\"\u03c9 (rad/s)\") plt.title(\"Phase Portrait Comparison\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() 5. Discussion and Extensions Resonance and Energy Transfer: Under the small-angle approximation, the system is linear, and resonance occurs when the driving frequency aligns with the natural frequency, i.e., $$ \\omega_d \\approx \\sqrt{\\frac{g}{L}} $$ In this resonant condition, the driving force continuously feeds energy into the system, increasing the oscillation amplitude. Effect of Damping: In the damped scenario (e.g., \\(b = 0.5\\) ), energy dissipates over time, causing the oscillation amplitude to decay. The phase space diagram shows a spiral trajectory converging toward the origin. Forced Scenario and Chaos: In the forced pendulum case, the simulation is performed using \\(b = 0\\) with a nonzero driving amplitude (e.g., \\(A = 1.0\\) ). The time series, phase space diagram, and especially the Poincar\u00e9 section reveal how the system behaves under pure forcing conditions. Bifurcation Analysis: By systematically varying the driving amplitude \\(A\\) and plotting the corresponding Poincar\u00e9 section values (after removing transients), a bifurcation diagram is obtained. This diagram provides insight into how the system transitions from periodic to chaotic behavior as \\(A\\) is varied. Limitations and Extensions: - While the small-angle approximation ( \\(\\sin\\theta \\approx \\theta\\) ) simplifies the analytical treatment, the full nonlinear model using \\(\\sin\\theta\\) is employed in the simulations. - Extensions to the model can include nonlinear damping (e.g., air resistance), non-periodic driving forces, or the examination of other bifurcation parameters (such as the driving frequency \\(\\omega_d\\) ). - Further analysis via bifurcation diagrams assists in understanding the parameter regimes where the system transitions to chaos. 6. Conclusion This work investigates the dynamics of the forced damped pendulum through both analytical approximations and numerical simulations. By comparing the time series, phase space diagrams, Poincar\u00e9 sections, and a bifurcation diagram across various scenarios (pure, damped, and forced pendulums), the study illustrates the transition from regular harmonic motion to complex, potentially chaotic behavior. The model provides insights applicable to energy harvesting, vibration control in structures, driven oscillatory circuits, and many other real-world systems. Parameter variations\u2014such as changes in the damping coefficient \\(b\\) , driving amplitude \\(A\\) , and driving frequency \\(\\omega_d\\) \u2014offer a rich context for further exploration of resonance, bifurcation, and chaotic transitions.","title":"Problem 2:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"We start from the forced damped pendulum equation: $$ \\frac{d^2\\theta}{dt^2} + b\\,\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega_d\\,t) $$","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#11-small-angle-approximation","text":"For small angles, we use the approximation $$ \\sin\\theta \\approx \\theta $$ which linearizes the equation to $$ \\frac{d^2\\theta}{dt^2} + b\\,\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega_d\\,t) $$ This differential equation has both homogeneous and particular solutions: Homogeneous Solution: The characteristic equation is $$ r^2 + b\\,r + \\frac{g}{L} = 0 $$ Depending on the value of \\(b\\) , the roots can be real or complex, leading to overdamped, critically damped, or underdamped responses. Particular Solution: For the forcing term $$ A\\cos(\\omega_d\\,t) $$ we try a solution of the form $$ \\theta_p(t) = C\\cos\\bigl(\\omega_d\\,t - \\varphi\\bigr) $$ This solution shows maximum amplitude near resonance, where $$ \\omega_d \\approx \\omega_0 = \\sqrt{\\frac{g}{L}}. $$","title":"1.1 Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#12-energy-considerations-and-resonance","text":"The total energy of the pendulum is given by the sum of the kinetic and potential energies: $$ E(t) = \\frac{1}{2}m\\Bigl(L\\dot{\\theta}\\Bigr)^2 + mgL\\Bigl(1-\\cos\\theta\\Bigr) $$ Under resonance conditions (especially in undamped or weakly damped regimes), the driving force continuously feeds energy into the system, increasing the oscillation amplitude. In the damped scenario, energy dissipates over time, causing the amplitude to decay. In the forced pendulum, the external force introduces complex behaviors\u2014including periodic, quasiperiodic, and chaotic dynamics\u2014which will be examined in the following sections.","title":"1.2 Energy Considerations and Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"We analyze three main cases: Pure Pendulum: \\(b = 0\\) and \\(A = 0\\) The system exhibits undriven, periodic oscillations. Damped Pendulum: \\(b \\neq 0\\) and \\(A = 0\\) Due to energy loss from damping, the oscillation amplitude decays over time and the phase space trajectory spirals into the origin. Forced (Driven) Pendulum: In this case, the simulation is performed using \\(b = 0\\) and a nonzero driving amplitude \\(A\\) (e.g., \\(A = 1.0\\) ). The external forcing leads to complex behavior that may range from regular periodic motion to chaos. Phase diagrams and Poincar\u00e9 sections will illustrate these transitions. In addition, varying the parameters (damping coefficient \\(b\\) , driving amplitude \\(A\\) , and driving frequency \\(\\omega_d\\) ) systematically reveals transitions in the dynamics, including resonant amplification and chaotic regimes. Bifurcation diagrams will help visualize how changes in, for example, the driving amplitude \\(A\\) affect the system\u2019s attractors.","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"The forced damped pendulum model applies in various real-world scenarios, including: Energy Harvesting: Optimizing energy transfer from ambient vibrations. Suspension Bridges: Managing vibrations due to periodic loads. Oscillating Circuits (Driven RLC Circuits): Understanding resonance and damping in electrical analogues. Biomechanics: Modeling periodic motions such as human gait.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"The following Python code implements the simulations for the three cases, generates time series, phase space diagrams, a Poincar\u00e9 section, and includes a bifurcation diagram by varying the driving amplitude \\(A\\) . Note that for the forced pendulum, the damping coefficient is set to \\(b = 0\\) as requested. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # --- Constants --- g = 9.81 # Acceleration due to gravity (m/s^2) L = 1.0 # Length of the pendulum (m) omega_d = 2/3 # Driving frequency # --- Differential Equation Definition --- def pendulum_ode(t, y, b, A, omega_d): theta, omega = y dtheta_dt = omega domega_dt = -b * omega - (g / L) * np.sin(theta) + A * np.cos(omega_d * t) return [dtheta_dt, domega_dt] # --- Simulation Settings --- t_span = (0, 20) # Simulation time span (s) t_eval = np.linspace(t_span[0], t_span[1], 1000) # Time evaluation points y0 = [0.2, 0.0] # Initial conditions: \u03b8 = 0.2 rad, \u03c9 = 0 rad/s # --- Scenario Parameters --- # Pure Pendulum: b = 0, A = 0 b_pure, A_pure = 0.0, 0.0 # Damped Pendulum: b \u2260 0, A = 0 (e.g., b = 0.5) b_damped, A_damped = 0.5, 0.0 # Forced Pendulum: b = 0, A \u2260 0 (e.g., A = 1.0) b_forced, A_forced = 0.0, 1.0 # --- Compute the Solutions --- sol_pure = solve_ivp(pendulum_ode, t_span, y0, t_eval=t_eval, args=(b_pure, A_pure, omega_d)) sol_damped = solve_ivp(pendulum_ode, t_span, y0, t_eval=t_eval, args=(b_damped, A_damped, omega_d)) sol_forced = solve_ivp(pendulum_ode, t_span, y0, t_eval=t_eval, args=(b_forced, A_forced, omega_d)) ############################ # Separate Visualizations ############################ # 1. Pure Pendulum Visualizations plt.figure(figsize=(12, 5)) plt.subplot(1, 2, 1) plt.plot(t_eval, sol_pure.y[0], color='blue') plt.xlabel(\"Time (s)\") plt.ylabel(\"\u03b8 (rad)\") plt.title(\"Pure Pendulum: Time Series (b=0, A=0)\") plt.grid(True) plt.subplot(1, 2, 2) plt.plot(sol_pure.y[0], sol_pure.y[1], color='blue') plt.xlabel(\"\u03b8 (rad)\") plt.ylabel(\"\u03c9 (rad/s)\") plt.title(\"Pure Pendulum: Phase Portrait\") plt.grid(True) plt.tight_layout() plt.show() # 2. Damped Pendulum Visualizations plt.figure(figsize=(12, 5)) plt.subplot(1, 2, 1) plt.plot(t_eval, sol_damped.y[0], color='green') plt.xlabel(\"Time (s)\") plt.ylabel(\"\u03b8 (rad)\") plt.title(\"Damped Pendulum: Time Series (b=0.5, A=0)\") plt.grid(True) plt.subplot(1, 2, 2) plt.plot(sol_damped.y[0], sol_damped.y[1], color='green') plt.xlabel(\"\u03b8 (rad)\") plt.ylabel(\"\u03c9 (rad/s)\") plt.title(\"Damped Pendulum: Phase Portrait\") plt.grid(True) plt.tight_layout() plt.show() # 3. Forced Pendulum Visualizations plt.figure(figsize=(12, 5)) plt.subplot(1, 2, 1) plt.plot(t_eval, sol_forced.y[0], color='red') plt.xlabel(\"Time (s)\") plt.ylabel(\"\u03b8 (rad)\") plt.title(\"Forced Pendulum: Time Series (b=0, A=1.0)\") plt.grid(True) plt.subplot(1, 2, 2) plt.plot(sol_forced.y[0], sol_forced.y[1], color='red') plt.xlabel(\"\u03b8 (rad)\") plt.ylabel(\"\u03c9 (rad/s)\") plt.title(\"Forced Pendulum: Phase Portrait\") plt.grid(True) plt.tight_layout() plt.show() ############################ # Comparative Visualizations ############################ plt.figure(figsize=(14, 6)) # Time Series Comparison plt.subplot(1, 2, 1) plt.plot(t_eval, sol_pure.y[0], label=\"Pure (b=0, A=0)\", color='blue') plt.plot(t_eval, sol_damped.y[0], label=\"Damped (b=0.5, A=0)\", color='green') plt.plot(t_eval, sol_forced.y[0], label=\"Forced (b=0, A=1.0)\", color='red') plt.xlabel(\"Time (s)\") plt.ylabel(\"\u03b8 (rad)\") plt.title(\"Time Series Comparison\") plt.legend() plt.grid(True) # Phase Portrait Comparison plt.subplot(1, 2, 2) plt.plot(sol_pure.y[0], sol_pure.y[1], label=\"Pure (b=0, A=0)\", color='blue') plt.plot(sol_damped.y[0], sol_damped.y[1], label=\"Damped (b=0.5, A=0)\", color='green') plt.plot(sol_forced.y[0], sol_forced.y[1], label=\"Forced (b=0, A=1.0)\", color='red') plt.xlabel(\"\u03b8 (rad)\") plt.ylabel(\"\u03c9 (rad/s)\") plt.title(\"Phase Portrait Comparison\") plt.legend() plt.grid(True) plt.tight_layout() plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-discussion-and-extensions","text":"Resonance and Energy Transfer: Under the small-angle approximation, the system is linear, and resonance occurs when the driving frequency aligns with the natural frequency, i.e., $$ \\omega_d \\approx \\sqrt{\\frac{g}{L}} $$ In this resonant condition, the driving force continuously feeds energy into the system, increasing the oscillation amplitude. Effect of Damping: In the damped scenario (e.g., \\(b = 0.5\\) ), energy dissipates over time, causing the oscillation amplitude to decay. The phase space diagram shows a spiral trajectory converging toward the origin. Forced Scenario and Chaos: In the forced pendulum case, the simulation is performed using \\(b = 0\\) with a nonzero driving amplitude (e.g., \\(A = 1.0\\) ). The time series, phase space diagram, and especially the Poincar\u00e9 section reveal how the system behaves under pure forcing conditions. Bifurcation Analysis: By systematically varying the driving amplitude \\(A\\) and plotting the corresponding Poincar\u00e9 section values (after removing transients), a bifurcation diagram is obtained. This diagram provides insight into how the system transitions from periodic to chaotic behavior as \\(A\\) is varied. Limitations and Extensions: - While the small-angle approximation ( \\(\\sin\\theta \\approx \\theta\\) ) simplifies the analytical treatment, the full nonlinear model using \\(\\sin\\theta\\) is employed in the simulations. - Extensions to the model can include nonlinear damping (e.g., air resistance), non-periodic driving forces, or the examination of other bifurcation parameters (such as the driving frequency \\(\\omega_d\\) ). - Further analysis via bifurcation diagrams assists in understanding the parameter regimes where the system transitions to chaos.","title":"5. Discussion and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-conclusion","text":"This work investigates the dynamics of the forced damped pendulum through both analytical approximations and numerical simulations. By comparing the time series, phase space diagrams, Poincar\u00e9 sections, and a bifurcation diagram across various scenarios (pure, damped, and forced pendulums), the study illustrates the transition from regular harmonic motion to complex, potentially chaotic behavior. The model provides insights applicable to energy harvesting, vibration control in structures, driven oscillatory circuits, and many other real-world systems. Parameter variations\u2014such as changes in the damping coefficient \\(b\\) , driving amplitude \\(A\\) , and driving frequency \\(\\omega_d\\) \u2014offer a rich context for further exploration of resonance, bifurcation, and chaotic transitions.","title":"6. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}